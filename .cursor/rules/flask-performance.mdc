---
globs: "*.py"
description: "Flask server performance and debugging guidelines"
---

# Flask 서버 성능 및 디버깅 규칙

## 🚨 중복 프로세스 방지

- Flask debug 모드는 프로덕션에서 비활성화 (`FLASK_DEBUG=False`)
- 서버 시작 전 기존 프로세스 확인: `lsof -i :3001`
- 백그라운드 실행 시 PID 추적 관리

## ⚡ LangGraph StateGraph 성능 원칙

- Enhanced Solar Chatbot 클래스는 단일 세션당 하나의 인스턴스 유지
- 10턴 분석 시 LLM 호출 최소화 (분석 → 조언 → 명언 검색 순서)
- 명언 선택 모드에서는 LangGraph 워크플로우 우회하여 직접 처리
- API 응답 시간 10초 이내 목표 (LLM 호출 포함)

## 🔍 진단 및 모니터링

- Health check API는 실제 시스템 상태 반영
- quote_retriever_available 상태 추가 모니터링
- 타임아웃 발생 시 즉시 로그 출력
- 메모리 사용량 및 응답 시간 모니터링
- 10턴 분석 완료 시 로그로 성과 확인

## 🎯 LangGraph 워크플로우 최적화

- StateGraph 노드 간 상태 전달 최소화
- validate_user_input → chatbot → save_history → (조건부) analyze_chat_history
- 명언 선택 완료 시 quote_selection_mode 즉시 해제
- 세션별 상태 관리로 메모리 누수 방지

## 📝 관련 파일

- 메인 서버: [app.py](mdc:app.py)
- LangGraph 상태 정의: ChatbotState TypedDict
- 워크플로우 노드: validate_user_input, chatbot, save_history, analyze_chat_history, generate_advice
